{"version":3,"sources":["template/filterItems.js","template/filterInput.js","template/filter.js","template/map.js","App.js","index.js"],"names":["FilterItem","props","initLocations","onHandlePick","locations","react_default","a","createElement","map","location","key","id","className","value","marker","title","onClick","event","filteredLocations","filter","pickOneLocation","target","FilterInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","query","setState","_this$props","onHandleChange","indexOf","state","_this2","autoFocus","type","placeholder","onChange","Component","Filter","filterInput","filterItems","Map","loaded","loadJS","errorHandler","infoWindow","addListener","globalInfo","close","open","setAnimation","window","google","maps","Animation","BOUNCE","setTimeout","panTo","position","itemIsClicked","clearMarkers","fetch","concat","then","res","json","infos","url","addMarker","addInfo","clickListener","mapLocations","addMap","initMap","bind","renderMap","src","error","ref","document","getElementsByTagName","script","async","defer","onerror","parentNode","insertBefore","getElementById","insertAdjacentHTML","center","zoom","Marker","animation","DROP","markers","push","setMap","setMapOnAll","InfoWindow","content","info","maxWidth","App","updateLocations","_","newLocations","_this$state","pickLocation","_this3","data","ReactDOM","render","HashRouter","src_App"],"mappings":"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","file":"static/js/main.c7aa472a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FilterItem = (props) => {\r\n\t/** initLocations - 初始地点数据 */\r\n\t/** locations - 列表正在显示的地点数据 */\r\n\t/** onHandlePick - 地图仅显示被点击地点的标记 */\r\n\tconst { initLocations, onHandlePick, locations } = props;\r\n\r\n\t/**\r\n\t* @description 筛选出用户点击的地点数据，并使地图仅显示该地点的标记\r\n\t* @param {string} value - 被点击的地点\r\n\t*/\r\n\tfunction pickOneLocation (value) {\r\n\t\t/** filteredLocations - 被筛选出的地点数据 */\r\n\t\tlet filteredLocations = initLocations.filter((location) => (\r\n\t\t\tlocation.marker.title === value));\r\n\t\tlet location = filteredLocations[0] ? filteredLocations : initLocations;\r\n\t\tonHandlePick(location);\r\n\t}\r\n\treturn (\r\n\t\t\t<ul>\r\n\t\t\t\t{\r\n\t\t\t\t\tlocations.map((location) => (\r\n\t\t\t\t\t\t<li key={location.id} className=\"filterItem\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName=\"buttonItem\"\r\n\t\t\t\t\t\t\t\tvalue={location.marker.title}\r\n\t\t\t\t\t\t\t\tonClick={(event) => pickOneLocation(event.target.value)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{location.marker.title}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t  \t\t</li>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</ul>\r\n\t\t)\r\n}\r\n\r\nexport default FilterItem;","import React, { Component } from 'react';\r\n\r\nclass FilterInput extends Component {\r\n\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t/** query - 用户输入 */\r\n\t\t\tquery: ''\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t* @description 筛选出与用户输入匹配的地点项们\r\n\t*/\r\n\thandleChange = (query) => {\r\n\t\tthis.setState({ query: query });\r\n\t\t/** initLocations - 初始地点数据 */\r\n\t\tconst { initLocations, onHandleChange } = this.props;\r\n\t\t/** filteredLocations - 被筛选出的地点数据 */\r\n\t\tlet filteredLocations = initLocations.filter((location) => (\r\n\t\t\tlocation.marker.title.indexOf(query) !== -1));\r\n\t\t/** newLocations - 应显示地点数据 */\r\n\t\tlet newLocations = filteredLocations[0] ? filteredLocations : initLocations;\r\n\t\t/** onHandleChange - 更新列表和地图显示 */\r\n\t\tonHandleChange(newLocations);\r\n\t};\r\n\r\n\trender () {\r\n\t\tconst { query } = this.state;\r\n\t\treturn (\r\n\t\t  <input\r\n\t\t  \tautoFocus\r\n\t\t  \ttype=\"text\"\r\n\t\t  \tplaceholder=\"Filter\"\r\n\t\t  \tvalue={query}\r\n\t\t  \tonChange={(event) => this.handleChange(event.target.value)}\r\n\t\t  />\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default FilterInput;","import React from 'react';\r\nimport FilterItem from './filterItems';\r\nimport FilterInput from './filterInput';\r\n\r\nconst Filter = (props) => {\r\n\tconst { initLocations, locations, onHandleChange, onHandlePick } = props;\r\n\treturn (\r\n\t\t<div className=\"filter\">\r\n\t  \t<h2>Filter Tool</h2>\r\n\t  \t<FilterInput\r\n\t  \t\tinitLocations={initLocations}\r\n\t  \t\tlocations={locations}\r\n\t  \t\tonHandleChange={onHandleChange}\r\n\t  \t/>\r\n\t    <FilterItem\r\n\t    \tinitLocations={initLocations}\r\n\t    \tlocations={locations}\r\n\t    \tonHandlePick={onHandlePick}\r\n\t    />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\n\r\nclass Map extends Component {\r\n\r\n  static map;\r\n  static marker;\r\n  static infoWindow;\r\n  static globalInfo;\r\n  static markers = [];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: false,\r\n    };\r\n  }\r\n  /**\r\n  * @description 加载Google maps\r\n  * @param {string} src - Google maps脚本地址\r\n  * @param {function} error - 错误处理函数\r\n  */\r\n  static loadJS(src, error) {\r\n    let ref = window.document.getElementsByTagName(\"script\")[0];\r\n    let script = window.document.createElement(\"script\");\r\n    script.src = src;\r\n    script.async = true;\r\n    script.defer = true;\r\n    script.onerror = error;\r\n    ref.parentNode.insertBefore(script, ref);\r\n  }\r\n\r\n  static errorHandler() {\r\n    document.getElementById('map').insertAdjacentHTML('afterbegin', `Oops, the map can't be loaded! Maybe you need a tool to visit google ~`)\r\n  }\r\n\r\n  componentDidMount() {\r\n    Map.loadJS(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBEbHiCAD3pznHIe2nzSWIPuZ2prAUQdeE&libraries=places&callback=initMap\", Map.errorHandler);\r\n  }\r\n\r\n  /**\r\n  * @description 添加地图\r\n  * @param {array} locations - 地点们\r\n  */\r\n  static addMap(locations) {\r\n    Map.map = new window.google.maps.Map(document.getElementById('map'), {\r\n      center: locations[0].marker.position,\r\n      zoom: 11\r\n    });\r\n    return Map.map;\r\n  }\r\n\r\n  /**\r\n  * @description 为地图添加地点标记\r\n  * @param {object} location - 地点信息\r\n  */\r\n  static addMarker(location) {\r\n    Map.marker = new window.google.maps.Marker({\r\n      position: location.marker.position,\r\n      title: location.marker.title,\r\n      map: Map.map,\r\n      animation: window.google.maps.Animation.DROP\r\n    });\r\n    Map.markers.push(Map.marker);\r\n    return Map.marker;\r\n  }\r\n\r\n  static setMapOnAll(map) {\r\n    Map.markers.map((marker) => {\r\n      marker.setMap(map);\r\n      return null;\r\n    });\r\n  }\r\n  /**\r\n  * @description 清除地图上的所有标记\r\n  */\r\n  static clearMarkers() {\r\n    Map.setMapOnAll(null);\r\n    Map.markers = [];\r\n  }\r\n\r\n  /**\r\n  * @description 为地点添加信息窗口和维基百科词条链接\r\n  */\r\n  static addInfo(location, url) {\r\n    Map.infoWindow= new window.google.maps.InfoWindow({\r\n      content: `${location.info}</br><a href=${url} target=\"_blank\">维基百科</a>`,\r\n      maxWidth: 200\r\n    });\r\n    return Map.infoWindow;\r\n  }\r\n\r\n  /**\r\n  * @description 为信息窗口添加点击监听事件\r\n  */\r\n  clickListener(marker, infoWindow) {\r\n    return marker.addListener('click', function () {\r\n      if (Map.globalInfo) {\r\n        Map.globalInfo.close();\r\n      }\r\n      /** 打开该标记的信息窗口 */\r\n      infoWindow.open(Map.map, marker);\r\n      Map.globalInfo = infoWindow;\r\n      /** 点击标记时标记上下跳动 */\r\n      marker.setAnimation(window.google.maps.Animation.BOUNCE);\r\n      /** 1s后停止动画 */\r\n      setTimeout(function () {\r\n        marker.setAnimation(null)\r\n      }, 1000);\r\n      /** 平滑移动中心点 */\r\n      Map.map.panTo(marker.position);\r\n    })\r\n  }\r\n\r\n  /**\r\n  * @description 渲染地图\r\n  */\r\n  renderMap(locations, itemIsClicked) {\r\n    /** 清除地图上的所有标记 */\r\n    Map.clearMarkers();\r\n    /** 为每一个地点添加标记、窗口信息和点击监听事件 */\r\n    locations.map((location) => {\r\n      fetch(`https://zh.wikipedia.org//w/api.php?action=opensearch&origin=*&format=json&search=${location.marker.title}&utf8=1\"`)\r\n        .then(res => res.json())\r\n        .then(infos => infos[3][0])\r\n        .then((url) => {\r\n          /** 添加标记 */\r\n          Map.addMarker(location);\r\n          /** 添加窗口信息 */\r\n          Map.addInfo(location, url);\r\n          /** 添加点击监听事件 */\r\n          this.clickListener(Map.marker, Map.infoWindow);\r\n          /** 如果发生了列表点击事件，则把地图中心点平滑移动到被点击的地点 */\r\n          if (itemIsClicked) {\r\n            Map.map.panTo(location.marker.position);\r\n          }\r\n        })\r\n      return null;\r\n    });\r\n  };\r\n\r\n  initMap() {\r\n    const { mapLocations } = this.props;\r\n    Map.addMap(mapLocations);\r\n    this.setState({\r\n      loaded: true\r\n    });\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { mapLocations, itemIsClicked } = this.props;\r\n    const { loaded } = this.state;\r\n    window.initMap = this.initMap.bind(this);\r\n    if (loaded) {\r\n      this.renderMap(mapLocations, itemIsClicked);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div id = \"map\"> </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map;","import React, { Component } from 'react';\r\nimport Filter from './template/filter';\r\nimport GoogleMap from './template/map';\r\nimport * as _ from 'lodash';\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t/** initLocations - 初始地点数据 */\r\n\t\t\tinitLocations: [],\r\n\t\t\t/** locations - 列表正在显示的地点数据 */\r\n\t\t\tlocations: [],\r\n\t\t\t/** mapLocations - 地图正在显示marker的地点的数据 */\r\n\t\t\tmapLocations: [],\r\n\t\t\titemIsClicked: false\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t* @description 同步更新列表和地图标记为筛选后地点，与此同时，该函数具备防抖功能\r\n\t* @param {array} newLocations - 筛选后数组\r\n\t*/\r\n\tupdateLocations = _.debounce((newLocations) => {\r\n\t\tthis.setState({\r\n\t\t\tlocations: newLocations,\r\n\t\t\tmapLocations: newLocations\r\n\t\t})\r\n\t}, 600);\r\n\r\n\t/**\r\n\t* @description 当用户点击列表中某地点项时，地图仅显示该地点的标记\r\n\t* @param {array} location - 被点击的地点项\r\n\t*/\r\n\tpickLocation (location) {\r\n\t\tthis.setState({\r\n\t\t\tmapLocations: location,\r\n\t\t\titemIsClicked: true\r\n\t\t});\r\n\t}\r\n\r\n \trender() {\r\n\t\tconst { locations, initLocations, mapLocations, itemIsClicked } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n      \t<div className=\"row\">\r\n\t\t\t\t\t<Filter\r\n\t\t\t\t\t\tinitLocations={initLocations}\r\n\t\t\t\t\t\tlocations={locations}\r\n\t\t\t\t\t\tonHandleChange={(newLocations) => this.updateLocations(newLocations)}\r\n\t\t\t\t\t\tonHandlePick={(location) => this.pickLocation(location)}\r\n\t\t\t\t\t/>\r\n\t\t      <GoogleMap\r\n\t\t\t\t\t\tlocations={locations}\r\n\t\t\t\t\t\tmapLocations={mapLocations}\r\n\t\t\t\t\t\titemIsClicked={itemIsClicked}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n      </div>\r\n  \t)\r\n\t}\r\n\r\n  /**\r\n\t* @description 获取locations.json中的数据并初始化initLocations、locations、mapLocations\r\n\t*/\r\n\tcomponentDidMount () {\r\n\t\tfetch('http://www.qianqianx.com/map-Udacity/api/locations.json')\r\n  \t.then((res) => res.json())\r\n  \t.then((info) => {\r\n\t \t\tthis.setState({\r\n\t\t\t\tinitLocations: info.data.locations,\r\n\t  \t\t\tlocations: info.data.locations,\r\n\t  \t\t\tmapLocations: info.data.locations\r\n\t\t\t})\r\n  \t})\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <HashRouter><App /></HashRouter>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}